# TODO: only build and tf plan for PR
options:
  dynamic_substitutions: true  
  substitutionOption: ALLOW_LOOSE
  env:
    - DOCKER_BUILDKIT=1

substitutions:
  _IMAGE_NAME: getting-started
  _NAMESPACE: ${_IMAGE_NAME}
  # _IMAGE_VERSION: '$BRANCH_NAME.$SHORT_SHA'
  _IMAGE_VERSION: $SHORT_SHA
  _ENV: kub-ent-sbx
  _CLOUDSDK_COMPUTE_REGION: europe-west1
  _CLOUDSDK_CONTAINER_CLUSTER: ${_ENV}-001
  _CLOUDSDK_CORE_PROJECT: ent-kub-sbx

  _REGISTRY: europe-west1-docker.pkg.dev
  _REPOSITORY: ${_IMAGE_NAME}
  _IMAGE: ${_REGISTRY}/${PROJECT_ID}/${_REPOSITORY}/${_IMAGE_NAME}

tags:
  - build
  - ${_IMAGE_NAME}

timeout: 3660s

logsBucket: 'gs://${PROJECT_ID}_cloudbuild/${REPO_NAME}/${BRANCH_NAME}'

# TODO: why images?
images:
  # - ${_REGISTRY}/${PROJECT_ID}/${_IMAGE_NAME}
  - ${_REGISTRY}/${PROJECT_ID}/${_REPOSITORY}/${_IMAGE_NAME}

availableSecrets:
  secretManager:
    - versionName: projects/$PROJECT_NUMBER/secrets/slack-${_ENV}-slack-url/versions/latest
      env: 'SLACK_URL' 

steps:
  - name: gcr.io/cloud-builders/gcloud
    id: Send start msg
    entrypoint: "bash"
    secretEnv: ['SLACK_URL']
    allowFailure: true
    args:
      - "-c"
      - |
        RESPONSE=$(curl -i -X POST -H 'Content-type: application/json' --data \
        '{"channel":"team-zzz","type":"mrkdwn",
        "text":"*getting-started* - $_ENV : Build commit $SHORT_SHA <$_LOGURL|[View Log]>"}' \
        $$SLACK_URL| \
        grep HTTP | cut -d' ' -f2)
        if [ "200" != "$$RESPONSE" ]; then exit 1; fi

  # TODO: Run unit tests if not part of docker build

  - id: build-getstarted
    name: 'gcr.io/cloud-builders/docker'
  # secretEnv:
  #  - SECRET_NAME
    args:
      - 'build'
      - '--tag=${_IMAGE}:latest'
      - '--tag=${_IMAGE}:${_IMAGE_VERSION}'
      - '--tag=${_IMAGE}:${COMMIT_SHA}'
      - --build-arg=BUILDKIT_INLINE_CACHE=1
      - --cache-from=${_IMAGE}:latest
      - --cache-from=${_IMAGE}:${_IMAGE_VERSION}
      - --cache-from=${_IMAGE}:dev
      - --cache-from=${_IMAGE}:tst
      - --cache-from=${_IMAGE}:prd
      - '.'
    timeout: 3600s


  # Install helm dependencies, no more `./charts` and `.tgz` archive
  - id: helm-deps
    name: 'alpine/helm'
    args: 
      - 'dependency'
      - 'update'
      - '/workspace/helm/getting-started'
    env:
      - 'CLOUDSDK_COMPUTE_REGION=${_CLOUDSDK_COMPUTE_REGION}'
      - 'CLOUDSDK_CONTAINER_CLUSTER=${_CLOUDSDK_CONTAINER_CLUSTER}'
      - 'CLOUDSDK_CORE_PROJECT=${_CLOUDSDK_CORE_PROJECT}'

  # Render Helm template
  - id: helm-template
    name: 'alpine/helm'
    args: 
      - 'template'
      - '--output-dir'
      - '/workspace/chart'
      - '--namespace'
      - '${_NAMESPACE}'
      - 'getting-started'
      - '--set'
      - 'common.container.image=${_IMAGE}:${_IMAGE_VERSION}'
      - '-f'
      - '/workspace/helm/getting-started/env/values-${_ENV}.yaml'
      - '/workspace/helm/getting-started'
    env:
      - 'CLOUDSDK_COMPUTE_REGION=${_CLOUDSDK_COMPUTE_REGION}'
      - 'CLOUDSDK_CONTAINER_CLUSTER=${_CLOUDSDK_CONTAINER_CLUSTER}'
      - 'CLOUDSDK_CORE_PROJECT=${_CLOUDSDK_CORE_PROJECT}'

  - id: 'Terraform init & plan'
    name: 'hashicorp/terraform:1.1.0'
    entrypoint: 'sh'
    args:
      - '-c'
      - |
        cd terraform && \
        terraform init && \
        terraform workspace select ${_ENV} && \
        terraform plan --var-file=env/${_ENV}.tfvars -out /workspace/tf_settings.tfplan

  - id: 'Terraform apply'
    name: 'hashicorp/terraform:1.1.0'
    entrypoint: 'sh'
    args:
      - '-c'
      - |
        cd terraform && \
        terraform workspace select ${_ENV} && \
        terraform apply -auto-approve "/workspace/tf_settings.tfplan"

  - id: Deploy
    name: gcr.io/cloud-builders/gke-deploy
    args:
      - apply
      - '--recursive'
      - '--filename=/workspace/chart'
      - '--cluster=${_CLOUDSDK_CONTAINER_CLUSTER}'
      - '--project=${_CLOUDSDK_CORE_PROJECT}'
      - '--location=${_CLOUDSDK_COMPUTE_REGION}'
      - '--namespace=${_NAMESPACE}'


  # TODO: smoke tests?
  # TODO: sync apigee
  # TODO: publish developer docs